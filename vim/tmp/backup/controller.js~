var deviceready_registered = false;
function HomeCtrl($scope, $rootScope, $window, $location, $timeout, Com, Db) {
	// console.log("HomeCtrl");
	// refresh Gui after socket msg
	if (!deviceready_registered) {
		document.addEventListener("deviceready", initBackbutton, false);
		deviceready_registered = true;
	}
	Com.navigate = function(location) {
	}
	function initBackbutton() {
		document.addEventListener("backbutton", function() {
			console.log($location.path());
			if (loadingScreen) {
				Com.LoadingScreen(false, "");
				Com.m_con.quest.stop(true);
			} else if ($location.path().substring(0, 8) === "/quests/") {
				Com.messageBox("Quest abgebrochen!");
				questFinished = true;
				Com.m_con.quest.stop(true);
				$location.path("/mcouppons");
			} else if ($location.path() === "/")
				navigator.app.exitApp();
			else if ($location.path() === "/code")
				$location.path("/mycouppons");
			else if ($location.path() === "/mcouppons" || $location.path() === "/mycouppons" || $location.path() === "/connect")
				$location.path("/");
			$rootScope.$apply();
		}, true);
	}
	;

	Com.endQuest = function(success, code) {
		if (ingameLoadingScreen)
			Com.IngameLoadingScreen(false);
		if (success) {
			Com.messageBox("super gewonnen");
			var coupon = Com.m_con.getCoupon(Com.m_con.quest.cid);
			Db.addCoupon(coupon, code);
		} else {
			Com.messageBox("das war wohl nix");
		}
		$location.path("mcouppons");
		if (Com.m_con.quest != null) {
			Com.m_con.quest.stop(true);
		}
		$rootScope.$apply();
	};
	Com.refreshUI = function(location) {
		if (loadingScreen)
			Com.LoadingScreen(false, "");
		// Navigate to othe page
		// UI data 
		if (Com.m_con !== null)
			$rootScope.quest = Com.m_con.quest;
		$rootScope.monitors = Com.data.monitors;
		$rootScope.couppons = Com.data.couppons;

		if (location !== "")
			$location.path(location);
		try {
			$rootScope.$apply();
		} catch (e) {
			// TODO: hier kommt es sehr oft vor, dass durch das endQuest ein fehler auftritt
		}

		if (Com.m_con !== undefined && Com.m_con != null && Com.m_con.info != null) {
			navigator.notification.alert(Com.m_con.info, function() {
				Com.m_con.info = null;
			}, "Status", "OK");
		}
	};

}
function ConnectCtrl($scope, $location, Com, $window) {

	// console.log("ConnectCtrl");
    navigator.geolocation.getCurrentPosition(function(p){
	Com.s_con.findNearbyMonitors("49.7809", "6.55055", "0.3");
	// Com.s_con.findNearbyMonitors(p.coords.longitude, p.coords.longitude, "0.3");
    });
	$scope.connect = function() {
		Com.s_con.connectToMonitor($scope.monitors[$scope.msid]);
		Com.LoadingScreen(true, "Verbinde ...");
		console.log("hm");
	};
	$scope.scan = function() {
		$window.plugins.barcodeScanner.scan(function(result) {
			$scope.msid = result.text;
			$scope.$apply();
			$scope.connect();
		}, function(error) {
			Com.messageBox("Scanning failed: " + error);
		});
	};
}
var currentCoupon;
function MyCoupponsCtrl($scope, Db, $location) {
	Db.getCoupons(function(tx, results) {
		var myCoupons = [];
		logcat.d("** [DB] There are " + results.rows.length + " coupons on this device.");
		for ( var i = 0; i < results.rows.length; i++) {
			var row = results.rows.item(i);
			myCoupons.push(row);
			logcat.d("* [DB] Coupon " + (i + 1) + ": CID=" + row.cid + ", Name=" + row.name + ", Owner=" + row.owner + ", Bonus=" + row.bonus + ", Code=" + row.code + ", img=" + row.img);
		}
		$scope.myCoupons = myCoupons;
		$scope.loadCode = function(coupon) {
			currentCoupon = coupon;
			$location.path("code");
		}
		$scope.$apply();
	});
}
function MCoupponsCtrl($scope, $location, Com) {
	console.log("MCoupponsCtrl");
	$scope.getCouppon = function(id) {
        Com.LoadingScreen(true,"Quest wird gestartet");
		Com.m_con.send(Com.mb.createQuestStartRequest(id));
	};
	$scope.carouselSwipe = function(left) {
		if (left)
			$('#coupon-carousel').carousel('next');
		else
			$('#coupon-carousel').carousel('prev');
	};

}
var questFinished = false;
function QuestSSPCtrl($scope, Com) {

	// console.log("QuestCtrl");
	$scope.schere = function() {
		Com.m_con.send(Com.mb.createSSPSelectionResponse(Com.m_con.quest.cid, 1));
	};
	$scope.stein = function() {
		Com.m_con.send(Com.mb.createSSPSelectionResponse(Com.m_con.quest.cid, 2));
	};
	$scope.papier = function() {
		Com.m_con.send(Com.mb.createSSPSelectionResponse(Com.m_con.quest.cid, 3));
	};
}

// Math
function QuestMathCtrl($scope, Com, $timeout, $location) {
	console.log("+" + JSON.stringify($scope.quest.exercises));
	console.log("math");
	$scope.mathAnswers = [];
	$scope.currentExercise = 1;
	$scope.nextExercise = function(answer, id) {
		$scope.mathAnswers.push({
			id : id,
			value : answer
		});
		if ($scope.currentExercise == $scope.quest.targetCount) {
			//console.log("Fertig");
			questFinished = true;
			Com.m_con.send(Com.mb.createCalcSolutionResponse(Com.m_con.quest.cid, $scope.mathAnswers));
		} else
			$scope.currentExercise += 1;
	}
	questFinished = false;
	$scope.counter = $scope.quest.time;
	$scope.onTimeout = function() {
		$scope.counter--;
		if ($scope.counter > 0 && questFinished == false) {
			$scope.mytimeout = $timeout($scope.onTimeout, 1000);
		}
		if ($scope.counter == 0) {
			Com.messageBox("Sorry, du warst zu langsam. Quest abgebrochen!");
			Com.m_con.quest.stop();
			$location.path("mcouppons");
		}
	}
	$scope.mytimeout = $timeout($scope.onTimeout, 1000);

}

// GEO
function QuestGeoCtrl($scope, Com, $window) {
    var pinColor = "0000FF";
    var pinImage = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|" + pinColor, new google.maps.Size(21, 34), new google.maps.Point(0, 0), new google.maps.Point(10, 34));
    console.log($scope.quest.target.latitude + "," + $scope.quest.target.longitude);
    var ll = new google.maps.LatLng($scope.quest.target.latitude, $scope.quest.target.longitude);

    $scope.submit = function(solution) {
        Com.m_con.send(Com.mb.createGeoResponse(Com.m_con.quest, solution));
    }

	$scope.scan = function() {
		$window.plugins.barcodeScanner.scan(function(result) {
			$scope.solution = result.text;
			$scope.$apply();
			$scope.submit($scope.solution);
		}, function(error) {
			Com.messageBox("Scanning failed: " + error);
		});
	};
	
	$scope.mapOptions = {
		center : ll,
		zoom : 18,
		disableDefaultUI : true,
		mapTypeId : google.maps.MapTypeId.ROADMAP
	};
	Com.refreshPersonMap = function() {
		if ($scope.personmarker == null) {
		// $scope.myMap.panTo(new google.maps.LatLng($scope.quest.latitude, $scope.quest.longitude));
			$scope.personmarker = new google.maps.Marker({
				map : $scope.myMap,
				icon : pinImage,
				position : new google.maps.LatLng($scope.quest.latitude, $scope.quest.longitude)
			});
		} else
			$scope.personmarker.setPosition(new google.maps.LatLng($scope.quest.latitude, $scope.quest.longitude));

		console.log($scope.quest.longitude);
		$scope.$apply();
	}

}
// SPEED
function QuestSpeedCtrl($scope, Com, $timeout) {
	Com.refreshPersonMap = function() {
		if ($scope.personmarker == null) {
            $scope.speedMap.panTo(new google.maps.LatLng($scope.quest.latitude, $scope.quest.longitude));
			$scope.personmarker = new google.maps.Marker({
				map : $scope.speedMap,
                zoom: 10,
				icon : pinImage,
				position : new google.maps.LatLng($scope.quest.latitude, $scope.quest.longitude)
			});
		} else
			$scope.personmarker.setPosition(new google.maps.LatLng($scope.quest.latitude, $scope.quest.longitude));


        $scope.$apply();
    }
    Com.refreshMap=function(){
       console.log("dada");
        $scope.refreshMarkers();
    }
    $scope.mapOptions = {
        center : ll,
        zoom : 5,
        disableDefaultUI : true,
        mapTypeId : google.maps.MapTypeId.ROADMAP
    };
    var ll = new google.maps.LatLng($scope.quest.longitude, $scope.quest.latitude);
    var pinColor = "0000FF";
    var pinImage = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|" + pinColor, new google.maps.Size(21, 34), new google.maps.Point(0, 0), new google.maps.Point(10, 34));
    // Markers should be added after map is loaded
    $scope.refreshMarkers= function() {
        console.log("blubb");
        angular.forEach($scope.myMarkers, function(value, key){
            value.setMap(null);
        });
        $scope.myMarkers=[];
        for ( var i = 0; i < $scope.quest.places.length; i++) {
            var marker = new google.maps.Marker({
                map : $scope.speedMap,
                labelContent : $scope.quest.name,
                position : new google.maps.LatLng($scope.quest.places[i].latitude, $scope.quest.places[i].longitude)
            });
            $scope.myMarkers.push(marker);

        }
    };
    $scope.initMapZoom=true;
    $scope.onMapIdle=function(){
        if ($scope.initMapZoom){
            $scope.initMapZoom=false;
            $scope.refreshMarkers();
            $scope.speedMap.panTo(new google.maps.LatLng(Com.s_con.pos.latitude, Com.s_con.pos.longitude));
        }
    };
    questFinished = false;
	$scope.counter = $scope.quest.time;
	$scope.onTimeout = function() {
		$scope.counter--;
		if ($scope.counter > 0 && questFinished == false) {
			$scope.mytimeout = $timeout($scope.onTimeout, 1000);
		}
		if ($scope.counter == 0) {
			Com.messageBox("Sorry, du warst zu langsam. Quest abgebrochen!");
			Com.m_con.quest.stop();
			$location.path("mcouppons");
		}
	}
	$scope.mytimeout = $timeout($scope.onTimeout, 1000);


}
function CodeCtrl($scope) {
}
