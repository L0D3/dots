#!/usr/bin/env python
# -*- coding: utf_8 -*-

'''
Created on 25.04.2013

@author: Daemon
'''

import constants
from slideshow import Slideshow
from ssp import SSPView
from libavg.gameapp import GameApp
from libavg import avg, AVGApp
from libavg.ui.button import TouchButton
from alchemydatabase import Database
import webrequests
import logging
import ConfigParser
from alchemydatabase import sessions
from alchemydatabase import Session
from content import ContentManager
from server import Server

'''AVG player'''
player = avg.Player.get()

'''Logging facility'''
logging.basicConfig(format="[%(asctime)-15s] %(levelname)s:%(message)s", level=logging.DEBUG)
logger = logging.getLogger('monitor')

class Main(AVGApp):

    _btn_size = avg.Point2D(0.4 * constants.RESOLUTION.x, 0.2 * constants.RESOLUTION.y)

    coupons = {}
    couponIds = {}
    
    needsUpdate = False
    

    msid = ""
    name = None

    __main = None

    __handler = None
    __onReadyHandler = None
    __onLoadHandler = None
    __onSyncHandler = None

    def init(self):
        self.__splash = player.createCanvas(id = "splash", size = constants.RESOLUTION, handleevents = True)
        self.__menu = player.createCanvas(id = "menu", size = constants.RESOLUTION, handleevents = True)
        self.__slideshow = player.createCanvas(id = "slideshow", size = constants.RESOLUTION, handleevents = True)
        self.__ssp = player.createCanvas(id = "ssp", size = constants.RESOLUTION, handleevents = True )
        self.hide()
        
        '''Screen'''
        self.__screen = avg.ImageNode(parent = player.getRootNode(), href = "canvas:splash", size = constants.RESOLUTION)
        
        self.__sspView = SSPView(parent = self.__ssp.getRootNode(), game = self, size=constants.RESOLUTION)
        
        self.__splashImage = avg.ImageNode(parent = self.__splash.getRootNode(), href = constants.RESOURCES_PATH + "splash.png", size = constants.RESOLUTION)

        '''Init interface'''
        self.__startButton = TouchButton(parent = self.__menu.getRootNode(),
                                        upNode = avg.ImageNode(href = constants.RESOURCES_PATH + "button_start.png", size = self._btn_size),
                                        downNode = avg.ImageNode(href = constants.RESOURCES_PATH + "button_start_clicked.png", size = self._btn_size),
                                        disabledNode = avg.ImageNode(href = constants.RESOURCES_PATH + "button_start_disabled.png", size = self._btn_size),
                                        clickHandler = self.__onStartButtonClick,
                                        pos = (self.__screen.size.x / 4 - self._btn_size.x / 2, self.__screen.size.y / 4 - self._btn_size.y / 2))
        self.__startButton.setEnabled(False)

        self.__syncButton = TouchButton(parent = self.__menu.getRootNode(),
                                        upNode = avg.ImageNode(href = constants.RESOURCES_PATH + "button_sync.png", size = self._btn_size),
                                        downNode = avg.ImageNode(href = constants.RESOURCES_PATH + "button_sync_clicked.png", size = self._btn_size),
                                        disabledNode = avg.ImageNode(href = constants.RESOURCES_PATH + "button_sync_disabled.png", size = self._btn_size),
                                        clickHandler = self.__onSyncButtonClick,
                                        pos = (self.__screen.size.x / 4 - self._btn_size.x / 2, self.__screen.size.y / 2 - self._btn_size.y / 2))

        self.__exitButton = TouchButton(parent = self.__menu.getRootNode(),
                                        upNode = avg.ImageNode(href = constants.RESOURCES_PATH + "button_exit.png", size = self._btn_size),
                                        downNode = avg.ImageNode(href = constants.RESOURCES_PATH + "button_exit_clicked.png", size = self._btn_size),
                                        disabledNode = avg.ImageNode(href = constants.RESOURCES_PATH + "button_exit_disabled.png", size = self._btn_size),
                                        clickHandler = self.exit,
                                        pos = (self.__screen.size.x / 4 - self._btn_size.x / 2, 3 * self.__screen.size.y / 4 - self._btn_size.y / 2))

        self.__loadingCircle = avg.ImageNode(parent = self.__menu.getRootNode(),
                                             href = constants.RESOURCES_PATH + "loadingcircle.png", size = (0.3 * self.__screen.size.x, 0.3 * self.__screen.size.x),
                                             pos = (0.6 * self.__screen.size.x, self.__screen.size.y / 2 - 0.15 * self.__screen.size.x - 40))
        self.__loadingText = avg.WordsNode(parent = self.__menu.getRootNode(), color="ffffff", text = "Loading...",
                                             variant = "Bold", fontsize = 30)
        self.__loadingText.pos = (3 * self.__screen.size.x / 4 - self.__loadingText.size.x / 2, self.__screen.size.y / 2 + 100 + self.__loadingText.size.y / 2)
        self.__loadingCircle.active = False
        self.__loadingText.active = False

        '''Create a connection to the database'''
        self.__database = Database()
        self.__database.create()

        '''Create a new session/database connection'''
        self.session = Session(session = sessions())

        '''Register update mechanism'''
        self.__handler = player.setInterval(5000, self.__update)

        '''Read in the config file, parse the monitor's dbid and its password'''
        config = ConfigParser.ConfigParser()
        config.read(constants.CONFIG_FILE_PATH)
        self.dbid = config.get("default", "dbid")
        self.password = config.get("default", "password")
        try:
            self.ip = config.get("optional", "ip")
        except:
            self.ip = None
        self.port = config.get("default", "port")

        '''Establish monitor server'''
        self.__server = Server(dbid = self.dbid, password = self.password, port = self.port, gameObj = self)
        self.__server.start()

        '''Create a new content manager updating the database in a fixed interval'''
        self.contentManager = ContentManager(game = self)
        
        '''Create the slideshow'''
        self.__main = Slideshow(parent = self.__slideshow.getRootNode(), game = self, size=constants.RESOLUTION)

        '''Show the main menu'''
        self.showMenu()

    def __setup(self):
        self.__onLoadHandler = player.setInterval(150, self.__onLoad)

        '''Check internet connection'''
        if not webrequests.CONNECTED():
            player.clearInterval(self.__onLoadHandler)
            self.__loadingCircle.active = False
            self.__loadingText.active = False
            raise Exception('No internet connection available')

        '''Sync with the server'''
        self.contentManager.start()
        
        '''Check when updates are ready'''
        self.__onReadyHandler = player.setInterval(350, self.__onReady)

    def __onReady(self):
        if not self.contentManager.ready:
            return

        del self.contentManager
        self.__loadingCircle.active = False
        self.__loadingText.active = False
        player.clearInterval(self.__onLoadHandler)
        del self.__onLoadHandler

        player.clearInterval(self.__onReadyHandler)
        del self.__onReadyHandler

        '''Advertise ip and port'''
        if self.ip:
            webrequests.UPDATE_IPPORT(self.dbid, self.password, self.ip, self.port)
        else:
            webrequests.UPDATE_PORT(self.dbid, self.password, self.port)

        self.__startButton.setEnabled(True)

    def __onLoad(self):
        self.__loadingCircle.active = True
        self.__loadingText.active = True
        self.__loadingCircle.angle = self.__loadingCircle.angle + 5.0
        
    def __update(self):
        if not self.coupons:
            return
        rows = self.session.getUpdates()
        for row in rows:
            self.coupons[self.couponIds[row['id']]]['contingent'] = row['contingent']
        self.session.clear()
        if self.needsUpdate:
            if self.__screen.href == "canvas:splash":
                self.needsUpdate = False
                print self.needsUpdate
                self.__main.setup()
                self.showSlideshow()
            else:
                self.showSplash()
                print "slpashscreen"

    def __onStartButtonClick(self):
        '''Slideshow'''
        self.showSlideshow()
        self.__main.start()

    def __onSyncButtonClick(self):
        self.__syncButton.setEnabled(False)
        self.__setup()

    def exit(self):
        '''exit method, needed such that _leave is called'''
        self._leave()
        exit(0)

    def _leave(self):
        '''Called upon leaving the application, here destroy all objects in main memory, disconnect handlers etc.'''
        if self.__handler:
            player.clearInterval(self.__handler)
            del self.__handler
        if self.__onLoadHandler:
            player.clearInterval(self.__onLoadHandler)
            del self.__onLoadHandler
        if self.__onReadyHandler:
            player.clearInterval(self.__onReadyHandler)
            del self.__onReadyHandler
        if self.__onSyncHandler:
            player.clearInterval(self.__onSyncHandler)
            del self.__onSyncHandler
        if self.__database:
            self.__database.destroy()
            del self.__database
        if self.session:
            self.session.close()
            del self.session
        if self.__server:
            self.__server.destroy()
            del self.__server
        if self.__main:
            self.__main.destroy()
            del self.__main
        del self.dbid
        del self.port
        del self.__screen
        del self.__menu
        del self.__startButton
        del self.__syncButton
        del self.__exitButton
        del self.__slideshow
        del self.__loadingCircle
        del self.__loadingText

    def hide(self):
        '''Hide all canvases'''
        self.__splash.autorender = False
        self.__menu.autorender = False
        self.__slideshow.autorender = False
        self.__ssp.autorender = False

    def showMenu(self):
        '''Show the main menu by changing the href attribute in the screen variable'''
        self.hide()
        self.__screen.href = "canvas:menu"
        self.__menu.autorender = True

    def showSlideshow(self):
        '''Show the slideshow by changing the href attribute in the screen variable'''
        self.hide()
        self.__screen.href = "canvas:slideshow"
        self.__slideshow.autorender = True

    def showSSP(self):
        '''Show the game view for a ssp game'''
        self.hide()
        self.__sspView.reset()
        self.__screen.href = "canvas:ssp"
        self.__ssp.autorender = True
        
    def showSplash(self):
        self.hide()
        self.__screen.href = "canvas:splash"
        self.__splash.autorender = True       

    def setSelection(self, player, selection):
        self.__sspView.setSelection(player, selection)

    def endGame(self, player):
        self.__sspView.endGame(player)

if __name__ == '__main__':
    Main.start(resolution = constants.RESOLUTION)
