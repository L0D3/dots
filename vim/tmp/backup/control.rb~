class Control < ActiveRecord::Base
  include BeautifulScaffoldModule      
  before_create :create_reports
  before_update :update_reports
  before_save :fulltext_field_processing
  attr_accessible :ersteerinnerung, :gebührenfälligkeit, :rechtsverlust, :verspätungsgebühr, :zustand, :zweiteerinnerung, :überwachungsanfrage,:state_id
  validates_uniqueness_of :gebührenfälligkeit, :scope => :patent_id
  belongs_to :state
  belongs_to :patent
  has_many :reports
  has_many :bills
  def create_reports
    Rtype.all.each do |t|
      reports.build do |r|
        r.rtype=t
        update_report_help(r,t) 
      end
    end
  end
  def update_reports
     reports.each do |r|
       update_report_help(r,r.rtype)
     end
  end
  def fulltext_field_processing
    # You can preparse with own things here
    generate_fulltext_field([])
  end
  scope :sorting, lambda{ |options|
    attribute = options[:attribute]
    direction = options[:sorting]

    attribute ||= "id"
    direction ||= "DESC"

    order("#{attribute} #{direction}")
  }
  # You can OVERRIDE this method used in model form and search form (in belongs_to relation)
  def caption
    (self["name"] || self["label"] || self["description"] || "##{id}")
  end

  private
  
  def update_report_help (r,t)
av = ActionView::Base.new()
av.view_paths = ActionController::Base.view_paths
av.extend ApplicationHelper #or any other helpers your template may need
    r.from= av.render(:template => "pdf/#{patent.nation.short}/#{t.name}/from.txt.erb",:locals => {:control => self,:patent=>patent}).html_safe
    r.to =  av.render(:template => "pdf/#{patent.nation.short}/#{t.name}/to.txt.erb",:locals => {:control => self,:patent=>patent}).html_safe
    r.warning =av.render(:template => "pdf/#{patent.nation.short}/#{t.name}/warning.txt.erb",:locals => {:control => self,:patent=>patent}).html_safe
    r.content = av.render(:template => "pdf/#{patent.nation.short}/#{t.name}/content.txt.erb",:locals => {:control => self,:patent=>patent}).html_safe
    r.subject = av.render(:template => "pdf/#{patent.nation.short}/#{t.name}/subject.txt.erb",:locals => {:control => self,:patent=>patent}).html_safe
  end

end


